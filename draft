package arhangel.dim.chat;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

/**
 *
 */
public class ChatServer {

	private int port;
	private ServerSocket serverSocket;
	private AtomicInteger idHolder = new AtomicInteger(0);
	private Map<Integer, Handler> handlers = new HashMap<>();

	public ChatServer(int port) {
		this.port = port;
	}

	public void start() throws IOException {
		serverSocket = new ServerSocket(port);
		System.out.println("Waiting for a client...");
		while (true) {
			Socket socket = serverSocket.accept();
			int internalId = idHolder.incrementAndGet();
			Handler handler = new Handler(this, socket, internalId);
			handlers.put(internalId, handler);
			handler.start();
		}
	}

	public synchronized void broadcast(Handler handler, Message message) {
		for (Map.Entry<Integer, Handler> entry : handlers.entrySet()) {
			System.out.println(handlers);
			entry.getValue().send(handler, message);
		}
	}

	public void handle(Handler handler, Message message) {
		broadcast(handler, message);

	}

    public void removeHandler(int internalId) {
        handlers.remove(internalId);
    }

	public static void main(String[] args) throws IOException {
		int port = 19000;
		ChatServer server = new ChatServer(port);
		server.start();
	}
}

class Handler extends Thread {

	private Socket socket;
	private int internalId;
	private ChatServer server;

	private DataInputStream in;
	private DataOutputStream out;

	public Handler(ChatServer server, Socket socket, int internalId) throws IOException {
		this.server = server;
		this.socket = socket;
		this.internalId = internalId;
		in = new DataInputStream(socket.getInputStream());
		out = new DataOutputStream(socket.getOutputStream());
		System.out.println("Handler created: " + internalId);
	}

	public void send(Handler sender, Message message) {
		System.out.println("Client " + sender.internalId + " sent to " + internalId + ": " + message.getData());

		try {
			out.writeUTF(message.getData());
			out.flush();
		} catch (IOException e) {
            System.out.println("Failed to write to socket. " + this);
            closeResources();
            server.removeHandler(internalId);
            interrupt();
		}

	}

	@Override
	public void run() {
		System.out.println("handler start");
		String line;
		try {
			while (!isInterrupted()) {
				line = in.readUTF();
				System.out.println("line: " + line);
				server.handle(this, new Message(line));
			}
		} catch (IOException e) {
            System.out.println("Failed to read from socket. " + this);
		} finally {
			closeResources();
            server.removeHandler(internalId);
			interrupt();
		}

	}

	private void closeResources() {
		try {
		    if (in != null)
		        in.close();
		    if (out != null)
		        out.close();
		    if (socket != null)
		        socket.close();
		} catch (IOException e) {
		    System.out.println("Failed to close resources.");
		}
	}

    @Override
    public String toString() {
        return "Handler [id= " + internalId  + "];";
    }
}



package arhangel.dim.chat;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.Socket;

/**
 *
 */
public class ChatClient {

	private Socket socket;
    private ClientThread thread;

	public ChatClient(String address, int port) throws Exception {
		InetAddress ipAddress = InetAddress.getByName(address);
		System.out.println("IP address " + address + " port " + port);
		socket = new Socket(ipAddress, port);
	}

    public void start() throws IOException {
        thread = new ClientThread(socket);
        thread.start();
    }

    public void stop() {
        if (thread != null) {
            thread.interrupt();
        }
        System.exit(0);
    }

    public void send(Message message) throws IOException {
        thread.send(message);
    }

	public static void main(String[] ar) throws Exception {
		int serverPort = 19000;
		String address = "127.0.0.1";

        ChatClient client = new ChatClient(address, serverPort);
        client.start();


		try {
			BufferedReader keyboard = new BufferedReader(new InputStreamReader(System.in));
			String line = null;
			System.out.println("Type and press enter.");
			System.out.println();

			while (true) {
				line = keyboard.readLine();
                client.send(new Message(line));
			}
		} catch (Exception x) {
			x.printStackTrace();
		}
	}

}

class ClientThread extends Thread {
	private Socket socket;
	private DataInputStream in;
	private DataOutputStream out;

	public ClientThread(Socket socket) throws IOException {
		this.socket = socket;
		in = new DataInputStream(socket.getInputStream());
		out = new DataOutputStream(socket.getOutputStream());
	}

    public void send(Message message) {
        try {
            out.writeUTF(message.getData());
            out.flush();
        } catch (IOException e) {
            System.out.println("Failed to write to socket. Shutdown.");
            closeResources();
            interrupt();
        }
    }

	@Override
	public void run() {
		String line;
		try {
			while (!isInterrupted()) {
				line = in.readUTF();
                System.out.println("Server: " + line);
            }
		} catch (IOException e) {
            System.out.println("Failed to read from socket. Shutdown.");
            closeResources();
            interrupt();
        }
	}

    private void closeResources() {
        try {
            if (in != null)
                in.close();
            if (out != null)
                out.close();
            if (socket != null)
                socket.close();
        } catch (IOException e) {
            System.out.println("Failed to close resources.");
        }
    }
}
